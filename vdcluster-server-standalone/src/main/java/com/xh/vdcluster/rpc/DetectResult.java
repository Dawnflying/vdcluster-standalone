/**
 * Autogenerated by Thrift Compiler (0.10.0)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
package com.xh.vdcluster.rpc;

@SuppressWarnings({"cast", "rawtypes", "serial", "unchecked", "unused"})
@javax.annotation.Generated(value = "Autogenerated by Thrift Compiler (0.10.0)", date = "2017-07-29")
public class DetectResult implements org.apache.thrift.TBase<DetectResult, DetectResult._Fields>, java.io.Serializable, Cloneable, Comparable<DetectResult> {
  private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("DetectResult");

  private static final org.apache.thrift.protocol.TField SERVICE_ID_FIELD_DESC = new org.apache.thrift.protocol.TField("serviceId", org.apache.thrift.protocol.TType.STRING, (short)1);
  private static final org.apache.thrift.protocol.TField HIT_TIME_FIELD_DESC = new org.apache.thrift.protocol.TField("hitTime", org.apache.thrift.protocol.TType.I32, (short)2);
  private static final org.apache.thrift.protocol.TField HEIGHT_FIELD_DESC = new org.apache.thrift.protocol.TField("height", org.apache.thrift.protocol.TType.I32, (short)3);
  private static final org.apache.thrift.protocol.TField WIDTH_FIELD_DESC = new org.apache.thrift.protocol.TField("width", org.apache.thrift.protocol.TType.I32, (short)4);
  private static final org.apache.thrift.protocol.TField REG_TYPES_FIELD_DESC = new org.apache.thrift.protocol.TField("regTypes", org.apache.thrift.protocol.TType.LIST, (short)5);
  private static final org.apache.thrift.protocol.TField REG_SCORES_FIELD_DESC = new org.apache.thrift.protocol.TField("regScores", org.apache.thrift.protocol.TType.LIST, (short)6);
  private static final org.apache.thrift.protocol.TField RECTS_FIELD_DESC = new org.apache.thrift.protocol.TField("rects", org.apache.thrift.protocol.TType.LIST, (short)7);
  private static final org.apache.thrift.protocol.TField PREVIEW_PIC_URL_FIELD_DESC = new org.apache.thrift.protocol.TField("previewPicURL", org.apache.thrift.protocol.TType.STRING, (short)8);
  private static final org.apache.thrift.protocol.TField VIDEO_URL_FIELD_DESC = new org.apache.thrift.protocol.TField("videoURL", org.apache.thrift.protocol.TType.STRING, (short)9);

  private static final org.apache.thrift.scheme.SchemeFactory STANDARD_SCHEME_FACTORY = new DetectResultStandardSchemeFactory();
  private static final org.apache.thrift.scheme.SchemeFactory TUPLE_SCHEME_FACTORY = new DetectResultTupleSchemeFactory();

  public String serviceId; // required
  public int hitTime; // required
  public int height; // required
  public int width; // required
  public java.util.List<String> regTypes; // required
  public java.util.List<Double> regScores; // required
  public java.util.List<RegRect> rects; // required
  public String previewPicURL; // required
  public String videoURL; // required

  /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
  public enum _Fields implements org.apache.thrift.TFieldIdEnum {
    SERVICE_ID((short)1, "serviceId"),
    HIT_TIME((short)2, "hitTime"),
    HEIGHT((short)3, "height"),
    WIDTH((short)4, "width"),
    REG_TYPES((short)5, "regTypes"),
    REG_SCORES((short)6, "regScores"),
    RECTS((short)7, "rects"),
    PREVIEW_PIC_URL((short)8, "previewPicURL"),
    VIDEO_URL((short)9, "videoURL");

    private static final java.util.Map<String, _Fields> byName = new java.util.HashMap<String, _Fields>();

    static {
      for (_Fields field : java.util.EnumSet.allOf(_Fields.class)) {
        byName.put(field.getFieldName(), field);
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, or null if its not found.
     */
    public static _Fields findByThriftId(int fieldId) {
      switch(fieldId) {
        case 1: // SERVICE_ID
          return SERVICE_ID;
        case 2: // HIT_TIME
          return HIT_TIME;
        case 3: // HEIGHT
          return HEIGHT;
        case 4: // WIDTH
          return WIDTH;
        case 5: // REG_TYPES
          return REG_TYPES;
        case 6: // REG_SCORES
          return REG_SCORES;
        case 7: // RECTS
          return RECTS;
        case 8: // PREVIEW_PIC_URL
          return PREVIEW_PIC_URL;
        case 9: // VIDEO_URL
          return VIDEO_URL;
        default:
          return null;
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, throwing an exception
     * if it is not found.
     */
    public static _Fields findByThriftIdOrThrow(int fieldId) {
      _Fields fields = findByThriftId(fieldId);
      if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
      return fields;
    }

    /**
     * Find the _Fields constant that matches name, or null if its not found.
     */
    public static _Fields findByName(String name) {
      return byName.get(name);
    }

    private final short _thriftId;
    private final String _fieldName;

    _Fields(short thriftId, String fieldName) {
      _thriftId = thriftId;
      _fieldName = fieldName;
    }

    public short getThriftFieldId() {
      return _thriftId;
    }

    public String getFieldName() {
      return _fieldName;
    }
  }

  // isset id assignments
  private static final int __HITTIME_ISSET_ID = 0;
  private static final int __HEIGHT_ISSET_ID = 1;
  private static final int __WIDTH_ISSET_ID = 2;
  private byte __isset_bitfield = 0;
  public static final java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
  static {
    java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new java.util.EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
    tmpMap.put(_Fields.SERVICE_ID, new org.apache.thrift.meta_data.FieldMetaData("serviceId", org.apache.thrift.TFieldRequirementType.REQUIRED, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.HIT_TIME, new org.apache.thrift.meta_data.FieldMetaData("hitTime", org.apache.thrift.TFieldRequirementType.REQUIRED, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
    tmpMap.put(_Fields.HEIGHT, new org.apache.thrift.meta_data.FieldMetaData("height", org.apache.thrift.TFieldRequirementType.REQUIRED, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
    tmpMap.put(_Fields.WIDTH, new org.apache.thrift.meta_data.FieldMetaData("width", org.apache.thrift.TFieldRequirementType.REQUIRED, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
    tmpMap.put(_Fields.REG_TYPES, new org.apache.thrift.meta_data.FieldMetaData("regTypes", org.apache.thrift.TFieldRequirementType.REQUIRED, 
        new org.apache.thrift.meta_data.ListMetaData(org.apache.thrift.protocol.TType.LIST, 
            new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING))));
    tmpMap.put(_Fields.REG_SCORES, new org.apache.thrift.meta_data.FieldMetaData("regScores", org.apache.thrift.TFieldRequirementType.REQUIRED, 
        new org.apache.thrift.meta_data.ListMetaData(org.apache.thrift.protocol.TType.LIST, 
            new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.DOUBLE))));
    tmpMap.put(_Fields.RECTS, new org.apache.thrift.meta_data.FieldMetaData("rects", org.apache.thrift.TFieldRequirementType.REQUIRED, 
        new org.apache.thrift.meta_data.ListMetaData(org.apache.thrift.protocol.TType.LIST, 
            new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, RegRect.class))));
    tmpMap.put(_Fields.PREVIEW_PIC_URL, new org.apache.thrift.meta_data.FieldMetaData("previewPicURL", org.apache.thrift.TFieldRequirementType.REQUIRED, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.VIDEO_URL, new org.apache.thrift.meta_data.FieldMetaData("videoURL", org.apache.thrift.TFieldRequirementType.REQUIRED, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    metaDataMap = java.util.Collections.unmodifiableMap(tmpMap);
    org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(DetectResult.class, metaDataMap);
  }

  public DetectResult() {
  }

  public DetectResult(
    String serviceId,
    int hitTime,
    int height,
    int width,
    java.util.List<String> regTypes,
    java.util.List<Double> regScores,
    java.util.List<RegRect> rects,
    String previewPicURL,
    String videoURL)
  {
    this();
    this.serviceId = serviceId;
    this.hitTime = hitTime;
    setHitTimeIsSet(true);
    this.height = height;
    setHeightIsSet(true);
    this.width = width;
    setWidthIsSet(true);
    this.regTypes = regTypes;
    this.regScores = regScores;
    this.rects = rects;
    this.previewPicURL = previewPicURL;
    this.videoURL = videoURL;
  }

  /**
   * Performs a deep copy on <i>other</i>.
   */
  public DetectResult(DetectResult other) {
    __isset_bitfield = other.__isset_bitfield;
    if (other.isSetServiceId()) {
      this.serviceId = other.serviceId;
    }
    this.hitTime = other.hitTime;
    this.height = other.height;
    this.width = other.width;
    if (other.isSetRegTypes()) {
      java.util.List<String> __this__regTypes = new java.util.ArrayList<String>(other.regTypes);
      this.regTypes = __this__regTypes;
    }
    if (other.isSetRegScores()) {
      java.util.List<Double> __this__regScores = new java.util.ArrayList<Double>(other.regScores);
      this.regScores = __this__regScores;
    }
    if (other.isSetRects()) {
      java.util.List<RegRect> __this__rects = new java.util.ArrayList<RegRect>(other.rects.size());
      for (RegRect other_element : other.rects) {
        __this__rects.add(new RegRect(other_element));
      }
      this.rects = __this__rects;
    }
    if (other.isSetPreviewPicURL()) {
      this.previewPicURL = other.previewPicURL;
    }
    if (other.isSetVideoURL()) {
      this.videoURL = other.videoURL;
    }
  }

  public DetectResult deepCopy() {
    return new DetectResult(this);
  }

  @Override
  public void clear() {
    this.serviceId = null;
    setHitTimeIsSet(false);
    this.hitTime = 0;
    setHeightIsSet(false);
    this.height = 0;
    setWidthIsSet(false);
    this.width = 0;
    this.regTypes = null;
    this.regScores = null;
    this.rects = null;
    this.previewPicURL = null;
    this.videoURL = null;
  }

  public String getServiceId() {
    return this.serviceId;
  }

  public DetectResult setServiceId(String serviceId) {
    this.serviceId = serviceId;
    return this;
  }

  public void unsetServiceId() {
    this.serviceId = null;
  }

  /** Returns true if field serviceId is set (has been assigned a value) and false otherwise */
  public boolean isSetServiceId() {
    return this.serviceId != null;
  }

  public void setServiceIdIsSet(boolean value) {
    if (!value) {
      this.serviceId = null;
    }
  }

  public int getHitTime() {
    return this.hitTime;
  }

  public DetectResult setHitTime(int hitTime) {
    this.hitTime = hitTime;
    setHitTimeIsSet(true);
    return this;
  }

  public void unsetHitTime() {
    __isset_bitfield = org.apache.thrift.EncodingUtils.clearBit(__isset_bitfield, __HITTIME_ISSET_ID);
  }

  /** Returns true if field hitTime is set (has been assigned a value) and false otherwise */
  public boolean isSetHitTime() {
    return org.apache.thrift.EncodingUtils.testBit(__isset_bitfield, __HITTIME_ISSET_ID);
  }

  public void setHitTimeIsSet(boolean value) {
    __isset_bitfield = org.apache.thrift.EncodingUtils.setBit(__isset_bitfield, __HITTIME_ISSET_ID, value);
  }

  public int getHeight() {
    return this.height;
  }

  public DetectResult setHeight(int height) {
    this.height = height;
    setHeightIsSet(true);
    return this;
  }

  public void unsetHeight() {
    __isset_bitfield = org.apache.thrift.EncodingUtils.clearBit(__isset_bitfield, __HEIGHT_ISSET_ID);
  }

  /** Returns true if field height is set (has been assigned a value) and false otherwise */
  public boolean isSetHeight() {
    return org.apache.thrift.EncodingUtils.testBit(__isset_bitfield, __HEIGHT_ISSET_ID);
  }

  public void setHeightIsSet(boolean value) {
    __isset_bitfield = org.apache.thrift.EncodingUtils.setBit(__isset_bitfield, __HEIGHT_ISSET_ID, value);
  }

  public int getWidth() {
    return this.width;
  }

  public DetectResult setWidth(int width) {
    this.width = width;
    setWidthIsSet(true);
    return this;
  }

  public void unsetWidth() {
    __isset_bitfield = org.apache.thrift.EncodingUtils.clearBit(__isset_bitfield, __WIDTH_ISSET_ID);
  }

  /** Returns true if field width is set (has been assigned a value) and false otherwise */
  public boolean isSetWidth() {
    return org.apache.thrift.EncodingUtils.testBit(__isset_bitfield, __WIDTH_ISSET_ID);
  }

  public void setWidthIsSet(boolean value) {
    __isset_bitfield = org.apache.thrift.EncodingUtils.setBit(__isset_bitfield, __WIDTH_ISSET_ID, value);
  }

  public int getRegTypesSize() {
    return (this.regTypes == null) ? 0 : this.regTypes.size();
  }

  public java.util.Iterator<String> getRegTypesIterator() {
    return (this.regTypes == null) ? null : this.regTypes.iterator();
  }

  public void addToRegTypes(String elem) {
    if (this.regTypes == null) {
      this.regTypes = new java.util.ArrayList<String>();
    }
    this.regTypes.add(elem);
  }

  public java.util.List<String> getRegTypes() {
    return this.regTypes;
  }

  public DetectResult setRegTypes(java.util.List<String> regTypes) {
    this.regTypes = regTypes;
    return this;
  }

  public void unsetRegTypes() {
    this.regTypes = null;
  }

  /** Returns true if field regTypes is set (has been assigned a value) and false otherwise */
  public boolean isSetRegTypes() {
    return this.regTypes != null;
  }

  public void setRegTypesIsSet(boolean value) {
    if (!value) {
      this.regTypes = null;
    }
  }

  public int getRegScoresSize() {
    return (this.regScores == null) ? 0 : this.regScores.size();
  }

  public java.util.Iterator<Double> getRegScoresIterator() {
    return (this.regScores == null) ? null : this.regScores.iterator();
  }

  public void addToRegScores(double elem) {
    if (this.regScores == null) {
      this.regScores = new java.util.ArrayList<Double>();
    }
    this.regScores.add(elem);
  }

  public java.util.List<Double> getRegScores() {
    return this.regScores;
  }

  public DetectResult setRegScores(java.util.List<Double> regScores) {
    this.regScores = regScores;
    return this;
  }

  public void unsetRegScores() {
    this.regScores = null;
  }

  /** Returns true if field regScores is set (has been assigned a value) and false otherwise */
  public boolean isSetRegScores() {
    return this.regScores != null;
  }

  public void setRegScoresIsSet(boolean value) {
    if (!value) {
      this.regScores = null;
    }
  }

  public int getRectsSize() {
    return (this.rects == null) ? 0 : this.rects.size();
  }

  public java.util.Iterator<RegRect> getRectsIterator() {
    return (this.rects == null) ? null : this.rects.iterator();
  }

  public void addToRects(RegRect elem) {
    if (this.rects == null) {
      this.rects = new java.util.ArrayList<RegRect>();
    }
    this.rects.add(elem);
  }

  public java.util.List<RegRect> getRects() {
    return this.rects;
  }

  public DetectResult setRects(java.util.List<RegRect> rects) {
    this.rects = rects;
    return this;
  }

  public void unsetRects() {
    this.rects = null;
  }

  /** Returns true if field rects is set (has been assigned a value) and false otherwise */
  public boolean isSetRects() {
    return this.rects != null;
  }

  public void setRectsIsSet(boolean value) {
    if (!value) {
      this.rects = null;
    }
  }

  public String getPreviewPicURL() {
    return this.previewPicURL;
  }

  public DetectResult setPreviewPicURL(String previewPicURL) {
    this.previewPicURL = previewPicURL;
    return this;
  }

  public void unsetPreviewPicURL() {
    this.previewPicURL = null;
  }

  /** Returns true if field previewPicURL is set (has been assigned a value) and false otherwise */
  public boolean isSetPreviewPicURL() {
    return this.previewPicURL != null;
  }

  public void setPreviewPicURLIsSet(boolean value) {
    if (!value) {
      this.previewPicURL = null;
    }
  }

  public String getVideoURL() {
    return this.videoURL;
  }

  public DetectResult setVideoURL(String videoURL) {
    this.videoURL = videoURL;
    return this;
  }

  public void unsetVideoURL() {
    this.videoURL = null;
  }

  /** Returns true if field videoURL is set (has been assigned a value) and false otherwise */
  public boolean isSetVideoURL() {
    return this.videoURL != null;
  }

  public void setVideoURLIsSet(boolean value) {
    if (!value) {
      this.videoURL = null;
    }
  }

  public void setFieldValue(_Fields field, Object value) {
    switch (field) {
    case SERVICE_ID:
      if (value == null) {
        unsetServiceId();
      } else {
        setServiceId((String)value);
      }
      break;

    case HIT_TIME:
      if (value == null) {
        unsetHitTime();
      } else {
        setHitTime((Integer)value);
      }
      break;

    case HEIGHT:
      if (value == null) {
        unsetHeight();
      } else {
        setHeight((Integer)value);
      }
      break;

    case WIDTH:
      if (value == null) {
        unsetWidth();
      } else {
        setWidth((Integer)value);
      }
      break;

    case REG_TYPES:
      if (value == null) {
        unsetRegTypes();
      } else {
        setRegTypes((java.util.List<String>)value);
      }
      break;

    case REG_SCORES:
      if (value == null) {
        unsetRegScores();
      } else {
        setRegScores((java.util.List<Double>)value);
      }
      break;

    case RECTS:
      if (value == null) {
        unsetRects();
      } else {
        setRects((java.util.List<RegRect>)value);
      }
      break;

    case PREVIEW_PIC_URL:
      if (value == null) {
        unsetPreviewPicURL();
      } else {
        setPreviewPicURL((String)value);
      }
      break;

    case VIDEO_URL:
      if (value == null) {
        unsetVideoURL();
      } else {
        setVideoURL((String)value);
      }
      break;

    }
  }

  public Object getFieldValue(_Fields field) {
    switch (field) {
    case SERVICE_ID:
      return getServiceId();

    case HIT_TIME:
      return getHitTime();

    case HEIGHT:
      return getHeight();

    case WIDTH:
      return getWidth();

    case REG_TYPES:
      return getRegTypes();

    case REG_SCORES:
      return getRegScores();

    case RECTS:
      return getRects();

    case PREVIEW_PIC_URL:
      return getPreviewPicURL();

    case VIDEO_URL:
      return getVideoURL();

    }
    throw new IllegalStateException();
  }

  /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
  public boolean isSet(_Fields field) {
    if (field == null) {
      throw new IllegalArgumentException();
    }

    switch (field) {
    case SERVICE_ID:
      return isSetServiceId();
    case HIT_TIME:
      return isSetHitTime();
    case HEIGHT:
      return isSetHeight();
    case WIDTH:
      return isSetWidth();
    case REG_TYPES:
      return isSetRegTypes();
    case REG_SCORES:
      return isSetRegScores();
    case RECTS:
      return isSetRects();
    case PREVIEW_PIC_URL:
      return isSetPreviewPicURL();
    case VIDEO_URL:
      return isSetVideoURL();
    }
    throw new IllegalStateException();
  }

  @Override
  public boolean equals(Object that) {
    if (that == null)
      return false;
    if (that instanceof DetectResult)
      return this.equals((DetectResult)that);
    return false;
  }

  public boolean equals(DetectResult that) {
    if (that == null)
      return false;
    if (this == that)
      return true;

    boolean this_present_serviceId = true && this.isSetServiceId();
    boolean that_present_serviceId = true && that.isSetServiceId();
    if (this_present_serviceId || that_present_serviceId) {
      if (!(this_present_serviceId && that_present_serviceId))
        return false;
      if (!this.serviceId.equals(that.serviceId))
        return false;
    }

    boolean this_present_hitTime = true;
    boolean that_present_hitTime = true;
    if (this_present_hitTime || that_present_hitTime) {
      if (!(this_present_hitTime && that_present_hitTime))
        return false;
      if (this.hitTime != that.hitTime)
        return false;
    }

    boolean this_present_height = true;
    boolean that_present_height = true;
    if (this_present_height || that_present_height) {
      if (!(this_present_height && that_present_height))
        return false;
      if (this.height != that.height)
        return false;
    }

    boolean this_present_width = true;
    boolean that_present_width = true;
    if (this_present_width || that_present_width) {
      if (!(this_present_width && that_present_width))
        return false;
      if (this.width != that.width)
        return false;
    }

    boolean this_present_regTypes = true && this.isSetRegTypes();
    boolean that_present_regTypes = true && that.isSetRegTypes();
    if (this_present_regTypes || that_present_regTypes) {
      if (!(this_present_regTypes && that_present_regTypes))
        return false;
      if (!this.regTypes.equals(that.regTypes))
        return false;
    }

    boolean this_present_regScores = true && this.isSetRegScores();
    boolean that_present_regScores = true && that.isSetRegScores();
    if (this_present_regScores || that_present_regScores) {
      if (!(this_present_regScores && that_present_regScores))
        return false;
      if (!this.regScores.equals(that.regScores))
        return false;
    }

    boolean this_present_rects = true && this.isSetRects();
    boolean that_present_rects = true && that.isSetRects();
    if (this_present_rects || that_present_rects) {
      if (!(this_present_rects && that_present_rects))
        return false;
      if (!this.rects.equals(that.rects))
        return false;
    }

    boolean this_present_previewPicURL = true && this.isSetPreviewPicURL();
    boolean that_present_previewPicURL = true && that.isSetPreviewPicURL();
    if (this_present_previewPicURL || that_present_previewPicURL) {
      if (!(this_present_previewPicURL && that_present_previewPicURL))
        return false;
      if (!this.previewPicURL.equals(that.previewPicURL))
        return false;
    }

    boolean this_present_videoURL = true && this.isSetVideoURL();
    boolean that_present_videoURL = true && that.isSetVideoURL();
    if (this_present_videoURL || that_present_videoURL) {
      if (!(this_present_videoURL && that_present_videoURL))
        return false;
      if (!this.videoURL.equals(that.videoURL))
        return false;
    }

    return true;
  }

  @Override
  public int hashCode() {
    int hashCode = 1;

    hashCode = hashCode * 8191 + ((isSetServiceId()) ? 131071 : 524287);
    if (isSetServiceId())
      hashCode = hashCode * 8191 + serviceId.hashCode();

    hashCode = hashCode * 8191 + hitTime;

    hashCode = hashCode * 8191 + height;

    hashCode = hashCode * 8191 + width;

    hashCode = hashCode * 8191 + ((isSetRegTypes()) ? 131071 : 524287);
    if (isSetRegTypes())
      hashCode = hashCode * 8191 + regTypes.hashCode();

    hashCode = hashCode * 8191 + ((isSetRegScores()) ? 131071 : 524287);
    if (isSetRegScores())
      hashCode = hashCode * 8191 + regScores.hashCode();

    hashCode = hashCode * 8191 + ((isSetRects()) ? 131071 : 524287);
    if (isSetRects())
      hashCode = hashCode * 8191 + rects.hashCode();

    hashCode = hashCode * 8191 + ((isSetPreviewPicURL()) ? 131071 : 524287);
    if (isSetPreviewPicURL())
      hashCode = hashCode * 8191 + previewPicURL.hashCode();

    hashCode = hashCode * 8191 + ((isSetVideoURL()) ? 131071 : 524287);
    if (isSetVideoURL())
      hashCode = hashCode * 8191 + videoURL.hashCode();

    return hashCode;
  }

  @Override
  public int compareTo(DetectResult other) {
    if (!getClass().equals(other.getClass())) {
      return getClass().getName().compareTo(other.getClass().getName());
    }

    int lastComparison = 0;

    lastComparison = Boolean.valueOf(isSetServiceId()).compareTo(other.isSetServiceId());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetServiceId()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.serviceId, other.serviceId);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetHitTime()).compareTo(other.isSetHitTime());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetHitTime()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.hitTime, other.hitTime);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetHeight()).compareTo(other.isSetHeight());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetHeight()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.height, other.height);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetWidth()).compareTo(other.isSetWidth());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetWidth()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.width, other.width);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetRegTypes()).compareTo(other.isSetRegTypes());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetRegTypes()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.regTypes, other.regTypes);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetRegScores()).compareTo(other.isSetRegScores());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetRegScores()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.regScores, other.regScores);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetRects()).compareTo(other.isSetRects());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetRects()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.rects, other.rects);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetPreviewPicURL()).compareTo(other.isSetPreviewPicURL());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetPreviewPicURL()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.previewPicURL, other.previewPicURL);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetVideoURL()).compareTo(other.isSetVideoURL());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetVideoURL()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.videoURL, other.videoURL);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    return 0;
  }

  public _Fields fieldForId(int fieldId) {
    return _Fields.findByThriftId(fieldId);
  }

  public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
    scheme(iprot).read(iprot, this);
  }

  public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
    scheme(oprot).write(oprot, this);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder("DetectResult(");
    boolean first = true;

    sb.append("serviceId:");
    if (this.serviceId == null) {
      sb.append("null");
    } else {
      sb.append(this.serviceId);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("hitTime:");
    sb.append(this.hitTime);
    first = false;
    if (!first) sb.append(", ");
    sb.append("height:");
    sb.append(this.height);
    first = false;
    if (!first) sb.append(", ");
    sb.append("width:");
    sb.append(this.width);
    first = false;
    if (!first) sb.append(", ");
    sb.append("regTypes:");
    if (this.regTypes == null) {
      sb.append("null");
    } else {
      sb.append(this.regTypes);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("regScores:");
    if (this.regScores == null) {
      sb.append("null");
    } else {
      sb.append(this.regScores);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("rects:");
    if (this.rects == null) {
      sb.append("null");
    } else {
      sb.append(this.rects);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("previewPicURL:");
    if (this.previewPicURL == null) {
      sb.append("null");
    } else {
      sb.append(this.previewPicURL);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("videoURL:");
    if (this.videoURL == null) {
      sb.append("null");
    } else {
      sb.append(this.videoURL);
    }
    first = false;
    sb.append(")");
    return sb.toString();
  }

  public void validate() throws org.apache.thrift.TException {
    // check for required fields
    if (serviceId == null) {
      throw new org.apache.thrift.protocol.TProtocolException("Required field 'serviceId' was not present! Struct: " + toString());
    }
    // alas, we cannot check 'hitTime' because it's a primitive and you chose the non-beans generator.
    // alas, we cannot check 'height' because it's a primitive and you chose the non-beans generator.
    // alas, we cannot check 'width' because it's a primitive and you chose the non-beans generator.
    if (regTypes == null) {
      throw new org.apache.thrift.protocol.TProtocolException("Required field 'regTypes' was not present! Struct: " + toString());
    }
    if (regScores == null) {
      throw new org.apache.thrift.protocol.TProtocolException("Required field 'regScores' was not present! Struct: " + toString());
    }
    if (rects == null) {
      throw new org.apache.thrift.protocol.TProtocolException("Required field 'rects' was not present! Struct: " + toString());
    }
    if (previewPicURL == null) {
      throw new org.apache.thrift.protocol.TProtocolException("Required field 'previewPicURL' was not present! Struct: " + toString());
    }
    if (videoURL == null) {
      throw new org.apache.thrift.protocol.TProtocolException("Required field 'videoURL' was not present! Struct: " + toString());
    }
    // check for sub-struct validity
  }

  private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
    try {
      write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
    try {
      // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
      __isset_bitfield = 0;
      read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private static class DetectResultStandardSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
    public DetectResultStandardScheme getScheme() {
      return new DetectResultStandardScheme();
    }
  }

  private static class DetectResultStandardScheme extends org.apache.thrift.scheme.StandardScheme<DetectResult> {

    public void read(org.apache.thrift.protocol.TProtocol iprot, DetectResult struct) throws org.apache.thrift.TException {
      org.apache.thrift.protocol.TField schemeField;
      iprot.readStructBegin();
      while (true)
      {
        schemeField = iprot.readFieldBegin();
        if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
          break;
        }
        switch (schemeField.id) {
          case 1: // SERVICE_ID
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.serviceId = iprot.readString();
              struct.setServiceIdIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 2: // HIT_TIME
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.hitTime = iprot.readI32();
              struct.setHitTimeIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 3: // HEIGHT
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.height = iprot.readI32();
              struct.setHeightIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 4: // WIDTH
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.width = iprot.readI32();
              struct.setWidthIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 5: // REG_TYPES
            if (schemeField.type == org.apache.thrift.protocol.TType.LIST) {
              {
                org.apache.thrift.protocol.TList _list0 = iprot.readListBegin();
                struct.regTypes = new java.util.ArrayList<String>(_list0.size);
                String _elem1;
                for (int _i2 = 0; _i2 < _list0.size; ++_i2)
                {
                  _elem1 = iprot.readString();
                  struct.regTypes.add(_elem1);
                }
                iprot.readListEnd();
              }
              struct.setRegTypesIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 6: // REG_SCORES
            if (schemeField.type == org.apache.thrift.protocol.TType.LIST) {
              {
                org.apache.thrift.protocol.TList _list3 = iprot.readListBegin();
                struct.regScores = new java.util.ArrayList<Double>(_list3.size);
                double _elem4;
                for (int _i5 = 0; _i5 < _list3.size; ++_i5)
                {
                  _elem4 = iprot.readDouble();
                  struct.regScores.add(_elem4);
                }
                iprot.readListEnd();
              }
              struct.setRegScoresIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 7: // RECTS
            if (schemeField.type == org.apache.thrift.protocol.TType.LIST) {
              {
                org.apache.thrift.protocol.TList _list6 = iprot.readListBegin();
                struct.rects = new java.util.ArrayList<RegRect>(_list6.size);
                RegRect _elem7;
                for (int _i8 = 0; _i8 < _list6.size; ++_i8)
                {
                  _elem7 = new RegRect();
                  _elem7.read(iprot);
                  struct.rects.add(_elem7);
                }
                iprot.readListEnd();
              }
              struct.setRectsIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 8: // PREVIEW_PIC_URL
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.previewPicURL = iprot.readString();
              struct.setPreviewPicURLIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 9: // VIDEO_URL
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.videoURL = iprot.readString();
              struct.setVideoURLIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          default:
            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
        }
        iprot.readFieldEnd();
      }
      iprot.readStructEnd();

      // check for required fields of primitive type, which can't be checked in the validate method
      if (!struct.isSetHitTime()) {
        throw new org.apache.thrift.protocol.TProtocolException("Required field 'hitTime' was not found in serialized data! Struct: " + toString());
      }
      if (!struct.isSetHeight()) {
        throw new org.apache.thrift.protocol.TProtocolException("Required field 'height' was not found in serialized data! Struct: " + toString());
      }
      if (!struct.isSetWidth()) {
        throw new org.apache.thrift.protocol.TProtocolException("Required field 'width' was not found in serialized data! Struct: " + toString());
      }
      struct.validate();
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot, DetectResult struct) throws org.apache.thrift.TException {
      struct.validate();

      oprot.writeStructBegin(STRUCT_DESC);
      if (struct.serviceId != null) {
        oprot.writeFieldBegin(SERVICE_ID_FIELD_DESC);
        oprot.writeString(struct.serviceId);
        oprot.writeFieldEnd();
      }
      oprot.writeFieldBegin(HIT_TIME_FIELD_DESC);
      oprot.writeI32(struct.hitTime);
      oprot.writeFieldEnd();
      oprot.writeFieldBegin(HEIGHT_FIELD_DESC);
      oprot.writeI32(struct.height);
      oprot.writeFieldEnd();
      oprot.writeFieldBegin(WIDTH_FIELD_DESC);
      oprot.writeI32(struct.width);
      oprot.writeFieldEnd();
      if (struct.regTypes != null) {
        oprot.writeFieldBegin(REG_TYPES_FIELD_DESC);
        {
          oprot.writeListBegin(new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRING, struct.regTypes.size()));
          for (String _iter9 : struct.regTypes)
          {
            oprot.writeString(_iter9);
          }
          oprot.writeListEnd();
        }
        oprot.writeFieldEnd();
      }
      if (struct.regScores != null) {
        oprot.writeFieldBegin(REG_SCORES_FIELD_DESC);
        {
          oprot.writeListBegin(new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.DOUBLE, struct.regScores.size()));
          for (double _iter10 : struct.regScores)
          {
            oprot.writeDouble(_iter10);
          }
          oprot.writeListEnd();
        }
        oprot.writeFieldEnd();
      }
      if (struct.rects != null) {
        oprot.writeFieldBegin(RECTS_FIELD_DESC);
        {
          oprot.writeListBegin(new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRUCT, struct.rects.size()));
          for (RegRect _iter11 : struct.rects)
          {
            _iter11.write(oprot);
          }
          oprot.writeListEnd();
        }
        oprot.writeFieldEnd();
      }
      if (struct.previewPicURL != null) {
        oprot.writeFieldBegin(PREVIEW_PIC_URL_FIELD_DESC);
        oprot.writeString(struct.previewPicURL);
        oprot.writeFieldEnd();
      }
      if (struct.videoURL != null) {
        oprot.writeFieldBegin(VIDEO_URL_FIELD_DESC);
        oprot.writeString(struct.videoURL);
        oprot.writeFieldEnd();
      }
      oprot.writeFieldStop();
      oprot.writeStructEnd();
    }

  }

  private static class DetectResultTupleSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
    public DetectResultTupleScheme getScheme() {
      return new DetectResultTupleScheme();
    }
  }

  private static class DetectResultTupleScheme extends org.apache.thrift.scheme.TupleScheme<DetectResult> {

    @Override
    public void write(org.apache.thrift.protocol.TProtocol prot, DetectResult struct) throws org.apache.thrift.TException {
      org.apache.thrift.protocol.TTupleProtocol oprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
      oprot.writeString(struct.serviceId);
      oprot.writeI32(struct.hitTime);
      oprot.writeI32(struct.height);
      oprot.writeI32(struct.width);
      {
        oprot.writeI32(struct.regTypes.size());
        for (String _iter12 : struct.regTypes)
        {
          oprot.writeString(_iter12);
        }
      }
      {
        oprot.writeI32(struct.regScores.size());
        for (double _iter13 : struct.regScores)
        {
          oprot.writeDouble(_iter13);
        }
      }
      {
        oprot.writeI32(struct.rects.size());
        for (RegRect _iter14 : struct.rects)
        {
          _iter14.write(oprot);
        }
      }
      oprot.writeString(struct.previewPicURL);
      oprot.writeString(struct.videoURL);
    }

    @Override
    public void read(org.apache.thrift.protocol.TProtocol prot, DetectResult struct) throws org.apache.thrift.TException {
      org.apache.thrift.protocol.TTupleProtocol iprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
      struct.serviceId = iprot.readString();
      struct.setServiceIdIsSet(true);
      struct.hitTime = iprot.readI32();
      struct.setHitTimeIsSet(true);
      struct.height = iprot.readI32();
      struct.setHeightIsSet(true);
      struct.width = iprot.readI32();
      struct.setWidthIsSet(true);
      {
        org.apache.thrift.protocol.TList _list15 = new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRING, iprot.readI32());
        struct.regTypes = new java.util.ArrayList<String>(_list15.size);
        String _elem16;
        for (int _i17 = 0; _i17 < _list15.size; ++_i17)
        {
          _elem16 = iprot.readString();
          struct.regTypes.add(_elem16);
        }
      }
      struct.setRegTypesIsSet(true);
      {
        org.apache.thrift.protocol.TList _list18 = new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.DOUBLE, iprot.readI32());
        struct.regScores = new java.util.ArrayList<Double>(_list18.size);
        double _elem19;
        for (int _i20 = 0; _i20 < _list18.size; ++_i20)
        {
          _elem19 = iprot.readDouble();
          struct.regScores.add(_elem19);
        }
      }
      struct.setRegScoresIsSet(true);
      {
        org.apache.thrift.protocol.TList _list21 = new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRUCT, iprot.readI32());
        struct.rects = new java.util.ArrayList<RegRect>(_list21.size);
        RegRect _elem22;
        for (int _i23 = 0; _i23 < _list21.size; ++_i23)
        {
          _elem22 = new RegRect();
          _elem22.read(iprot);
          struct.rects.add(_elem22);
        }
      }
      struct.setRectsIsSet(true);
      struct.previewPicURL = iprot.readString();
      struct.setPreviewPicURLIsSet(true);
      struct.videoURL = iprot.readString();
      struct.setVideoURLIsSet(true);
    }
  }

  private static <S extends org.apache.thrift.scheme.IScheme> S scheme(org.apache.thrift.protocol.TProtocol proto) {
    return (org.apache.thrift.scheme.StandardScheme.class.equals(proto.getScheme()) ? STANDARD_SCHEME_FACTORY : TUPLE_SCHEME_FACTORY).getScheme();
  }
}

