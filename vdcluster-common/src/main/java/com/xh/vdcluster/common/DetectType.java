/**
 * Autogenerated by Thrift Compiler (0.10.0)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
package com.xh.vdcluster.common;

@SuppressWarnings({"cast", "rawtypes", "serial", "unchecked", "unused"})
@javax.annotation.Generated(value = "Autogenerated by Thrift Compiler (0.10.0)", date = "2017-07-29")
public class DetectType implements org.apache.thrift.TBase<DetectType, DetectType._Fields>, java.io.Serializable, Cloneable, Comparable<DetectType> {
  private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("DetectType");

  private static final org.apache.thrift.protocol.TField REG_TYPE_FIELD_DESC = new org.apache.thrift.protocol.TField("regType", org.apache.thrift.protocol.TType.STRING, (short)1);
  private static final org.apache.thrift.protocol.TField SENSITIVITY_FIELD_DESC = new org.apache.thrift.protocol.TField("sensitivity", org.apache.thrift.protocol.TType.DOUBLE, (short)2);

  private static final org.apache.thrift.scheme.SchemeFactory STANDARD_SCHEME_FACTORY = new DetectTypeStandardSchemeFactory();
  private static final org.apache.thrift.scheme.SchemeFactory TUPLE_SCHEME_FACTORY = new DetectTypeTupleSchemeFactory();

  public String regType; // required
  public double sensitivity; // required

  /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
  public enum _Fields implements org.apache.thrift.TFieldIdEnum {
    REG_TYPE((short)1, "regType"),
    SENSITIVITY((short)2, "sensitivity");

    private static final java.util.Map<String, _Fields> byName = new java.util.HashMap<String, _Fields>();

    static {
      for (_Fields field : java.util.EnumSet.allOf(_Fields.class)) {
        byName.put(field.getFieldName(), field);
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, or null if its not found.
     */
    public static _Fields findByThriftId(int fieldId) {
      switch(fieldId) {
        case 1: // REG_TYPE
          return REG_TYPE;
        case 2: // SENSITIVITY
          return SENSITIVITY;
        default:
          return null;
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, throwing an exception
     * if it is not found.
     */
    public static _Fields findByThriftIdOrThrow(int fieldId) {
      _Fields fields = findByThriftId(fieldId);
      if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
      return fields;
    }

    /**
     * Find the _Fields constant that matches name, or null if its not found.
     */
    public static _Fields findByName(String name) {
      return byName.get(name);
    }

    private final short _thriftId;
    private final String _fieldName;

    _Fields(short thriftId, String fieldName) {
      _thriftId = thriftId;
      _fieldName = fieldName;
    }

    public short getThriftFieldId() {
      return _thriftId;
    }

    public String getFieldName() {
      return _fieldName;
    }
  }

  // isset id assignments
  private static final int __SENSITIVITY_ISSET_ID = 0;
  private byte __isset_bitfield = 0;
  public static final java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
  static {
    java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new java.util.EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
    tmpMap.put(_Fields.REG_TYPE, new org.apache.thrift.meta_data.FieldMetaData("regType", org.apache.thrift.TFieldRequirementType.REQUIRED, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.SENSITIVITY, new org.apache.thrift.meta_data.FieldMetaData("sensitivity", org.apache.thrift.TFieldRequirementType.REQUIRED, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.DOUBLE)));
    metaDataMap = java.util.Collections.unmodifiableMap(tmpMap);
    org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(DetectType.class, metaDataMap);
  }

  public DetectType() {
  }

  public DetectType(
    String regType,
    double sensitivity)
  {
    this();
    this.regType = regType;
    this.sensitivity = sensitivity;
    setSensitivityIsSet(true);
  }

  /**
   * Performs a deep copy on <i>other</i>.
   */
  public DetectType(DetectType other) {
    __isset_bitfield = other.__isset_bitfield;
    if (other.isSetRegType()) {
      this.regType = other.regType;
    }
    this.sensitivity = other.sensitivity;
  }

  public DetectType deepCopy() {
    return new DetectType(this);
  }

  @Override
  public void clear() {
    this.regType = null;
    setSensitivityIsSet(false);
    this.sensitivity = 0.0;
  }

  public String getRegType() {
    return this.regType;
  }

  public DetectType setRegType(String regType) {
    this.regType = regType;
    return this;
  }

  public void unsetRegType() {
    this.regType = null;
  }

  /** Returns true if field regType is set (has been assigned a value) and false otherwise */
  public boolean isSetRegType() {
    return this.regType != null;
  }

  public void setRegTypeIsSet(boolean value) {
    if (!value) {
      this.regType = null;
    }
  }

  public double getSensitivity() {
    return this.sensitivity;
  }

  public DetectType setSensitivity(double sensitivity) {
    this.sensitivity = sensitivity;
    setSensitivityIsSet(true);
    return this;
  }

  public void unsetSensitivity() {
    __isset_bitfield = org.apache.thrift.EncodingUtils.clearBit(__isset_bitfield, __SENSITIVITY_ISSET_ID);
  }

  /** Returns true if field sensitivity is set (has been assigned a value) and false otherwise */
  public boolean isSetSensitivity() {
    return org.apache.thrift.EncodingUtils.testBit(__isset_bitfield, __SENSITIVITY_ISSET_ID);
  }

  public void setSensitivityIsSet(boolean value) {
    __isset_bitfield = org.apache.thrift.EncodingUtils.setBit(__isset_bitfield, __SENSITIVITY_ISSET_ID, value);
  }

  public void setFieldValue(_Fields field, Object value) {
    switch (field) {
    case REG_TYPE:
      if (value == null) {
        unsetRegType();
      } else {
        setRegType((String)value);
      }
      break;

    case SENSITIVITY:
      if (value == null) {
        unsetSensitivity();
      } else {
        setSensitivity((Double)value);
      }
      break;

    }
  }

  public Object getFieldValue(_Fields field) {
    switch (field) {
    case REG_TYPE:
      return getRegType();

    case SENSITIVITY:
      return getSensitivity();

    }
    throw new IllegalStateException();
  }

  /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
  public boolean isSet(_Fields field) {
    if (field == null) {
      throw new IllegalArgumentException();
    }

    switch (field) {
    case REG_TYPE:
      return isSetRegType();
    case SENSITIVITY:
      return isSetSensitivity();
    }
    throw new IllegalStateException();
  }

  @Override
  public boolean equals(Object that) {
    if (that == null)
      return false;
    if (that instanceof DetectType)
      return this.equals((DetectType)that);
    return false;
  }

  public boolean equals(DetectType that) {
    if (that == null)
      return false;
    if (this == that)
      return true;

    boolean this_present_regType = true && this.isSetRegType();
    boolean that_present_regType = true && that.isSetRegType();
    if (this_present_regType || that_present_regType) {
      if (!(this_present_regType && that_present_regType))
        return false;
      if (!this.regType.equals(that.regType))
        return false;
    }

    boolean this_present_sensitivity = true;
    boolean that_present_sensitivity = true;
    if (this_present_sensitivity || that_present_sensitivity) {
      if (!(this_present_sensitivity && that_present_sensitivity))
        return false;
      if (this.sensitivity != that.sensitivity)
        return false;
    }

    return true;
  }

  @Override
  public int hashCode() {
    int hashCode = 1;

    hashCode = hashCode * 8191 + ((isSetRegType()) ? 131071 : 524287);
    if (isSetRegType())
      hashCode = hashCode * 8191 + regType.hashCode();

    hashCode = hashCode * 8191 + org.apache.thrift.TBaseHelper.hashCode(sensitivity);

    return hashCode;
  }

  @Override
  public int compareTo(DetectType other) {
    if (!getClass().equals(other.getClass())) {
      return getClass().getName().compareTo(other.getClass().getName());
    }

    int lastComparison = 0;

    lastComparison = Boolean.valueOf(isSetRegType()).compareTo(other.isSetRegType());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetRegType()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.regType, other.regType);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetSensitivity()).compareTo(other.isSetSensitivity());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetSensitivity()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.sensitivity, other.sensitivity);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    return 0;
  }

  public _Fields fieldForId(int fieldId) {
    return _Fields.findByThriftId(fieldId);
  }

  public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
    scheme(iprot).read(iprot, this);
  }

  public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
    scheme(oprot).write(oprot, this);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder("DetectType(");
    boolean first = true;

    sb.append("regType:");
    if (this.regType == null) {
      sb.append("null");
    } else {
      sb.append(this.regType);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("sensitivity:");
    sb.append(this.sensitivity);
    first = false;
    sb.append(")");
    return sb.toString();
  }

  public void validate() throws org.apache.thrift.TException {
    // check for required fields
    if (regType == null) {
      throw new org.apache.thrift.protocol.TProtocolException("Required field 'regType' was not present! Struct: " + toString());
    }
    // alas, we cannot check 'sensitivity' because it's a primitive and you chose the non-beans generator.
    // check for sub-struct validity
  }

  private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
    try {
      write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
    try {
      // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
      __isset_bitfield = 0;
      read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private static class DetectTypeStandardSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
    public DetectTypeStandardScheme getScheme() {
      return new DetectTypeStandardScheme();
    }
  }

  private static class DetectTypeStandardScheme extends org.apache.thrift.scheme.StandardScheme<DetectType> {

    public void read(org.apache.thrift.protocol.TProtocol iprot, DetectType struct) throws org.apache.thrift.TException {
      org.apache.thrift.protocol.TField schemeField;
      iprot.readStructBegin();
      while (true)
      {
        schemeField = iprot.readFieldBegin();
        if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
          break;
        }
        switch (schemeField.id) {
          case 1: // REG_TYPE
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.regType = iprot.readString();
              struct.setRegTypeIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 2: // SENSITIVITY
            if (schemeField.type == org.apache.thrift.protocol.TType.DOUBLE) {
              struct.sensitivity = iprot.readDouble();
              struct.setSensitivityIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          default:
            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
        }
        iprot.readFieldEnd();
      }
      iprot.readStructEnd();

      // check for required fields of primitive type, which can't be checked in the validate method
      if (!struct.isSetSensitivity()) {
        throw new org.apache.thrift.protocol.TProtocolException("Required field 'sensitivity' was not found in serialized data! Struct: " + toString());
      }
      struct.validate();
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot, DetectType struct) throws org.apache.thrift.TException {
      struct.validate();

      oprot.writeStructBegin(STRUCT_DESC);
      if (struct.regType != null) {
        oprot.writeFieldBegin(REG_TYPE_FIELD_DESC);
        oprot.writeString(struct.regType);
        oprot.writeFieldEnd();
      }
      oprot.writeFieldBegin(SENSITIVITY_FIELD_DESC);
      oprot.writeDouble(struct.sensitivity);
      oprot.writeFieldEnd();
      oprot.writeFieldStop();
      oprot.writeStructEnd();
    }

  }

  private static class DetectTypeTupleSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
    public DetectTypeTupleScheme getScheme() {
      return new DetectTypeTupleScheme();
    }
  }

  private static class DetectTypeTupleScheme extends org.apache.thrift.scheme.TupleScheme<DetectType> {

    @Override
    public void write(org.apache.thrift.protocol.TProtocol prot, DetectType struct) throws org.apache.thrift.TException {
      org.apache.thrift.protocol.TTupleProtocol oprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
      oprot.writeString(struct.regType);
      oprot.writeDouble(struct.sensitivity);
    }

    @Override
    public void read(org.apache.thrift.protocol.TProtocol prot, DetectType struct) throws org.apache.thrift.TException {
      org.apache.thrift.protocol.TTupleProtocol iprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
      struct.regType = iprot.readString();
      struct.setRegTypeIsSet(true);
      struct.sensitivity = iprot.readDouble();
      struct.setSensitivityIsSet(true);
    }
  }

  private static <S extends org.apache.thrift.scheme.IScheme> S scheme(org.apache.thrift.protocol.TProtocol proto) {
    return (org.apache.thrift.scheme.StandardScheme.class.equals(proto.getScheme()) ? STANDARD_SCHEME_FACTORY : TUPLE_SCHEME_FACTORY).getScheme();
  }
}

