/**
 * Autogenerated by Thrift Compiler (0.10.0)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
package com.xh.vdcluster.common;

@SuppressWarnings({"cast", "rawtypes", "serial", "unchecked", "unused"})
@javax.annotation.Generated(value = "Autogenerated by Thrift Compiler (0.10.0)", date = "2017-07-29")
public class DetectServiceConfiguration implements org.apache.thrift.TBase<DetectServiceConfiguration, DetectServiceConfiguration._Fields>, java.io.Serializable, Cloneable, Comparable<DetectServiceConfiguration> {
  private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("DetectServiceConfiguration");

  private static final org.apache.thrift.protocol.TField SERVICE_ID_FIELD_DESC = new org.apache.thrift.protocol.TField("serviceId", org.apache.thrift.protocol.TType.STRING, (short)1);
  private static final org.apache.thrift.protocol.TField STREAM_URL_FIELD_DESC = new org.apache.thrift.protocol.TField("streamURL", org.apache.thrift.protocol.TType.STRING, (short)2);
  private static final org.apache.thrift.protocol.TField STREAM_TYPE_FIELD_DESC = new org.apache.thrift.protocol.TField("streamType", org.apache.thrift.protocol.TType.I32, (short)3);
  private static final org.apache.thrift.protocol.TField DECODE_MODE_FIELD_DESC = new org.apache.thrift.protocol.TField("decodeMode", org.apache.thrift.protocol.TType.I32, (short)4);
  private static final org.apache.thrift.protocol.TField FRAME_WIDTH_FIELD_DESC = new org.apache.thrift.protocol.TField("frameWidth", org.apache.thrift.protocol.TType.I32, (short)5);
  private static final org.apache.thrift.protocol.TField FRAME_HEIGHT_FIELD_DESC = new org.apache.thrift.protocol.TField("frameHeight", org.apache.thrift.protocol.TType.I32, (short)6);
  private static final org.apache.thrift.protocol.TField DETECT_TYPE_FIELD_DESC = new org.apache.thrift.protocol.TField("detectType", org.apache.thrift.protocol.TType.LIST, (short)7);

  private static final org.apache.thrift.scheme.SchemeFactory STANDARD_SCHEME_FACTORY = new DetectServiceConfigurationStandardSchemeFactory();
  private static final org.apache.thrift.scheme.SchemeFactory TUPLE_SCHEME_FACTORY = new DetectServiceConfigurationTupleSchemeFactory();

  public String serviceId; // required
  public String streamURL; // required
  public int streamType; // required
  public int decodeMode; // required
  public int frameWidth; // required
  public int frameHeight; // required
  public java.util.List<DetectType> detectType; // required

  /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
  public enum _Fields implements org.apache.thrift.TFieldIdEnum {
    SERVICE_ID((short)1, "serviceId"),
    STREAM_URL((short)2, "streamURL"),
    STREAM_TYPE((short)3, "streamType"),
    DECODE_MODE((short)4, "decodeMode"),
    FRAME_WIDTH((short)5, "frameWidth"),
    FRAME_HEIGHT((short)6, "frameHeight"),
    DETECT_TYPE((short)7, "detectType");

    private static final java.util.Map<String, _Fields> byName = new java.util.HashMap<String, _Fields>();

    static {
      for (_Fields field : java.util.EnumSet.allOf(_Fields.class)) {
        byName.put(field.getFieldName(), field);
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, or null if its not found.
     */
    public static _Fields findByThriftId(int fieldId) {
      switch(fieldId) {
        case 1: // SERVICE_ID
          return SERVICE_ID;
        case 2: // STREAM_URL
          return STREAM_URL;
        case 3: // STREAM_TYPE
          return STREAM_TYPE;
        case 4: // DECODE_MODE
          return DECODE_MODE;
        case 5: // FRAME_WIDTH
          return FRAME_WIDTH;
        case 6: // FRAME_HEIGHT
          return FRAME_HEIGHT;
        case 7: // DETECT_TYPE
          return DETECT_TYPE;
        default:
          return null;
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, throwing an exception
     * if it is not found.
     */
    public static _Fields findByThriftIdOrThrow(int fieldId) {
      _Fields fields = findByThriftId(fieldId);
      if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
      return fields;
    }

    /**
     * Find the _Fields constant that matches name, or null if its not found.
     */
    public static _Fields findByName(String name) {
      return byName.get(name);
    }

    private final short _thriftId;
    private final String _fieldName;

    _Fields(short thriftId, String fieldName) {
      _thriftId = thriftId;
      _fieldName = fieldName;
    }

    public short getThriftFieldId() {
      return _thriftId;
    }

    public String getFieldName() {
      return _fieldName;
    }
  }

  // isset id assignments
  private static final int __STREAMTYPE_ISSET_ID = 0;
  private static final int __DECODEMODE_ISSET_ID = 1;
  private static final int __FRAMEWIDTH_ISSET_ID = 2;
  private static final int __FRAMEHEIGHT_ISSET_ID = 3;
  private byte __isset_bitfield = 0;
  public static final java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
  static {
    java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new java.util.EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
    tmpMap.put(_Fields.SERVICE_ID, new org.apache.thrift.meta_data.FieldMetaData("serviceId", org.apache.thrift.TFieldRequirementType.REQUIRED, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.STREAM_URL, new org.apache.thrift.meta_data.FieldMetaData("streamURL", org.apache.thrift.TFieldRequirementType.REQUIRED, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.STREAM_TYPE, new org.apache.thrift.meta_data.FieldMetaData("streamType", org.apache.thrift.TFieldRequirementType.REQUIRED, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
    tmpMap.put(_Fields.DECODE_MODE, new org.apache.thrift.meta_data.FieldMetaData("decodeMode", org.apache.thrift.TFieldRequirementType.REQUIRED, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
    tmpMap.put(_Fields.FRAME_WIDTH, new org.apache.thrift.meta_data.FieldMetaData("frameWidth", org.apache.thrift.TFieldRequirementType.REQUIRED, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
    tmpMap.put(_Fields.FRAME_HEIGHT, new org.apache.thrift.meta_data.FieldMetaData("frameHeight", org.apache.thrift.TFieldRequirementType.REQUIRED, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
    tmpMap.put(_Fields.DETECT_TYPE, new org.apache.thrift.meta_data.FieldMetaData("detectType", org.apache.thrift.TFieldRequirementType.REQUIRED, 
        new org.apache.thrift.meta_data.ListMetaData(org.apache.thrift.protocol.TType.LIST, 
            new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, DetectType.class))));
    metaDataMap = java.util.Collections.unmodifiableMap(tmpMap);
    org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(DetectServiceConfiguration.class, metaDataMap);
  }

  public DetectServiceConfiguration() {
  }

  public DetectServiceConfiguration(
    String serviceId,
    String streamURL,
    int streamType,
    int decodeMode,
    int frameWidth,
    int frameHeight,
    java.util.List<DetectType> detectType)
  {
    this();
    this.serviceId = serviceId;
    this.streamURL = streamURL;
    this.streamType = streamType;
    setStreamTypeIsSet(true);
    this.decodeMode = decodeMode;
    setDecodeModeIsSet(true);
    this.frameWidth = frameWidth;
    setFrameWidthIsSet(true);
    this.frameHeight = frameHeight;
    setFrameHeightIsSet(true);
    this.detectType = detectType;
  }

  /**
   * Performs a deep copy on <i>other</i>.
   */
  public DetectServiceConfiguration(DetectServiceConfiguration other) {
    __isset_bitfield = other.__isset_bitfield;
    if (other.isSetServiceId()) {
      this.serviceId = other.serviceId;
    }
    if (other.isSetStreamURL()) {
      this.streamURL = other.streamURL;
    }
    this.streamType = other.streamType;
    this.decodeMode = other.decodeMode;
    this.frameWidth = other.frameWidth;
    this.frameHeight = other.frameHeight;
    if (other.isSetDetectType()) {
      java.util.List<DetectType> __this__detectType = new java.util.ArrayList<DetectType>(other.detectType.size());
      for (DetectType other_element : other.detectType) {
        __this__detectType.add(new DetectType(other_element));
      }
      this.detectType = __this__detectType;
    }
  }

  public DetectServiceConfiguration deepCopy() {
    return new DetectServiceConfiguration(this);
  }

  @Override
  public void clear() {
    this.serviceId = null;
    this.streamURL = null;
    setStreamTypeIsSet(false);
    this.streamType = 0;
    setDecodeModeIsSet(false);
    this.decodeMode = 0;
    setFrameWidthIsSet(false);
    this.frameWidth = 0;
    setFrameHeightIsSet(false);
    this.frameHeight = 0;
    this.detectType = null;
  }

  public String getServiceId() {
    return this.serviceId;
  }

  public DetectServiceConfiguration setServiceId(String serviceId) {
    this.serviceId = serviceId;
    return this;
  }

  public void unsetServiceId() {
    this.serviceId = null;
  }

  /** Returns true if field serviceId is set (has been assigned a value) and false otherwise */
  public boolean isSetServiceId() {
    return this.serviceId != null;
  }

  public void setServiceIdIsSet(boolean value) {
    if (!value) {
      this.serviceId = null;
    }
  }

  public String getStreamURL() {
    return this.streamURL;
  }

  public DetectServiceConfiguration setStreamURL(String streamURL) {
    this.streamURL = streamURL;
    return this;
  }

  public void unsetStreamURL() {
    this.streamURL = null;
  }

  /** Returns true if field streamURL is set (has been assigned a value) and false otherwise */
  public boolean isSetStreamURL() {
    return this.streamURL != null;
  }

  public void setStreamURLIsSet(boolean value) {
    if (!value) {
      this.streamURL = null;
    }
  }

  public int getStreamType() {
    return this.streamType;
  }

  public DetectServiceConfiguration setStreamType(int streamType) {
    this.streamType = streamType;
    setStreamTypeIsSet(true);
    return this;
  }

  public void unsetStreamType() {
    __isset_bitfield = org.apache.thrift.EncodingUtils.clearBit(__isset_bitfield, __STREAMTYPE_ISSET_ID);
  }

  /** Returns true if field streamType is set (has been assigned a value) and false otherwise */
  public boolean isSetStreamType() {
    return org.apache.thrift.EncodingUtils.testBit(__isset_bitfield, __STREAMTYPE_ISSET_ID);
  }

  public void setStreamTypeIsSet(boolean value) {
    __isset_bitfield = org.apache.thrift.EncodingUtils.setBit(__isset_bitfield, __STREAMTYPE_ISSET_ID, value);
  }

  public int getDecodeMode() {
    return this.decodeMode;
  }

  public DetectServiceConfiguration setDecodeMode(int decodeMode) {
    this.decodeMode = decodeMode;
    setDecodeModeIsSet(true);
    return this;
  }

  public void unsetDecodeMode() {
    __isset_bitfield = org.apache.thrift.EncodingUtils.clearBit(__isset_bitfield, __DECODEMODE_ISSET_ID);
  }

  /** Returns true if field decodeMode is set (has been assigned a value) and false otherwise */
  public boolean isSetDecodeMode() {
    return org.apache.thrift.EncodingUtils.testBit(__isset_bitfield, __DECODEMODE_ISSET_ID);
  }

  public void setDecodeModeIsSet(boolean value) {
    __isset_bitfield = org.apache.thrift.EncodingUtils.setBit(__isset_bitfield, __DECODEMODE_ISSET_ID, value);
  }

  public int getFrameWidth() {
    return this.frameWidth;
  }

  public DetectServiceConfiguration setFrameWidth(int frameWidth) {
    this.frameWidth = frameWidth;
    setFrameWidthIsSet(true);
    return this;
  }

  public void unsetFrameWidth() {
    __isset_bitfield = org.apache.thrift.EncodingUtils.clearBit(__isset_bitfield, __FRAMEWIDTH_ISSET_ID);
  }

  /** Returns true if field frameWidth is set (has been assigned a value) and false otherwise */
  public boolean isSetFrameWidth() {
    return org.apache.thrift.EncodingUtils.testBit(__isset_bitfield, __FRAMEWIDTH_ISSET_ID);
  }

  public void setFrameWidthIsSet(boolean value) {
    __isset_bitfield = org.apache.thrift.EncodingUtils.setBit(__isset_bitfield, __FRAMEWIDTH_ISSET_ID, value);
  }

  public int getFrameHeight() {
    return this.frameHeight;
  }

  public DetectServiceConfiguration setFrameHeight(int frameHeight) {
    this.frameHeight = frameHeight;
    setFrameHeightIsSet(true);
    return this;
  }

  public void unsetFrameHeight() {
    __isset_bitfield = org.apache.thrift.EncodingUtils.clearBit(__isset_bitfield, __FRAMEHEIGHT_ISSET_ID);
  }

  /** Returns true if field frameHeight is set (has been assigned a value) and false otherwise */
  public boolean isSetFrameHeight() {
    return org.apache.thrift.EncodingUtils.testBit(__isset_bitfield, __FRAMEHEIGHT_ISSET_ID);
  }

  public void setFrameHeightIsSet(boolean value) {
    __isset_bitfield = org.apache.thrift.EncodingUtils.setBit(__isset_bitfield, __FRAMEHEIGHT_ISSET_ID, value);
  }

  public int getDetectTypeSize() {
    return (this.detectType == null) ? 0 : this.detectType.size();
  }

  public java.util.Iterator<DetectType> getDetectTypeIterator() {
    return (this.detectType == null) ? null : this.detectType.iterator();
  }

  public void addToDetectType(DetectType elem) {
    if (this.detectType == null) {
      this.detectType = new java.util.ArrayList<DetectType>();
    }
    this.detectType.add(elem);
  }

  public java.util.List<DetectType> getDetectType() {
    return this.detectType;
  }

  public DetectServiceConfiguration setDetectType(java.util.List<DetectType> detectType) {
    this.detectType = detectType;
    return this;
  }

  public void unsetDetectType() {
    this.detectType = null;
  }

  /** Returns true if field detectType is set (has been assigned a value) and false otherwise */
  public boolean isSetDetectType() {
    return this.detectType != null;
  }

  public void setDetectTypeIsSet(boolean value) {
    if (!value) {
      this.detectType = null;
    }
  }

  public void setFieldValue(_Fields field, Object value) {
    switch (field) {
    case SERVICE_ID:
      if (value == null) {
        unsetServiceId();
      } else {
        setServiceId((String)value);
      }
      break;

    case STREAM_URL:
      if (value == null) {
        unsetStreamURL();
      } else {
        setStreamURL((String)value);
      }
      break;

    case STREAM_TYPE:
      if (value == null) {
        unsetStreamType();
      } else {
        setStreamType((Integer)value);
      }
      break;

    case DECODE_MODE:
      if (value == null) {
        unsetDecodeMode();
      } else {
        setDecodeMode((Integer)value);
      }
      break;

    case FRAME_WIDTH:
      if (value == null) {
        unsetFrameWidth();
      } else {
        setFrameWidth((Integer)value);
      }
      break;

    case FRAME_HEIGHT:
      if (value == null) {
        unsetFrameHeight();
      } else {
        setFrameHeight((Integer)value);
      }
      break;

    case DETECT_TYPE:
      if (value == null) {
        unsetDetectType();
      } else {
        setDetectType((java.util.List<DetectType>)value);
      }
      break;

    }
  }

  public Object getFieldValue(_Fields field) {
    switch (field) {
    case SERVICE_ID:
      return getServiceId();

    case STREAM_URL:
      return getStreamURL();

    case STREAM_TYPE:
      return getStreamType();

    case DECODE_MODE:
      return getDecodeMode();

    case FRAME_WIDTH:
      return getFrameWidth();

    case FRAME_HEIGHT:
      return getFrameHeight();

    case DETECT_TYPE:
      return getDetectType();

    }
    throw new IllegalStateException();
  }

  /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
  public boolean isSet(_Fields field) {
    if (field == null) {
      throw new IllegalArgumentException();
    }

    switch (field) {
    case SERVICE_ID:
      return isSetServiceId();
    case STREAM_URL:
      return isSetStreamURL();
    case STREAM_TYPE:
      return isSetStreamType();
    case DECODE_MODE:
      return isSetDecodeMode();
    case FRAME_WIDTH:
      return isSetFrameWidth();
    case FRAME_HEIGHT:
      return isSetFrameHeight();
    case DETECT_TYPE:
      return isSetDetectType();
    }
    throw new IllegalStateException();
  }

  @Override
  public boolean equals(Object that) {
    if (that == null)
      return false;
    if (that instanceof DetectServiceConfiguration)
      return this.equals((DetectServiceConfiguration)that);
    return false;
  }

  public boolean equals(DetectServiceConfiguration that) {
    if (that == null)
      return false;
    if (this == that)
      return true;

    boolean this_present_serviceId = true && this.isSetServiceId();
    boolean that_present_serviceId = true && that.isSetServiceId();
    if (this_present_serviceId || that_present_serviceId) {
      if (!(this_present_serviceId && that_present_serviceId))
        return false;
      if (!this.serviceId.equals(that.serviceId))
        return false;
    }

    boolean this_present_streamURL = true && this.isSetStreamURL();
    boolean that_present_streamURL = true && that.isSetStreamURL();
    if (this_present_streamURL || that_present_streamURL) {
      if (!(this_present_streamURL && that_present_streamURL))
        return false;
      if (!this.streamURL.equals(that.streamURL))
        return false;
    }

    boolean this_present_streamType = true;
    boolean that_present_streamType = true;
    if (this_present_streamType || that_present_streamType) {
      if (!(this_present_streamType && that_present_streamType))
        return false;
      if (this.streamType != that.streamType)
        return false;
    }

    boolean this_present_decodeMode = true;
    boolean that_present_decodeMode = true;
    if (this_present_decodeMode || that_present_decodeMode) {
      if (!(this_present_decodeMode && that_present_decodeMode))
        return false;
      if (this.decodeMode != that.decodeMode)
        return false;
    }

    boolean this_present_frameWidth = true;
    boolean that_present_frameWidth = true;
    if (this_present_frameWidth || that_present_frameWidth) {
      if (!(this_present_frameWidth && that_present_frameWidth))
        return false;
      if (this.frameWidth != that.frameWidth)
        return false;
    }

    boolean this_present_frameHeight = true;
    boolean that_present_frameHeight = true;
    if (this_present_frameHeight || that_present_frameHeight) {
      if (!(this_present_frameHeight && that_present_frameHeight))
        return false;
      if (this.frameHeight != that.frameHeight)
        return false;
    }

    boolean this_present_detectType = true && this.isSetDetectType();
    boolean that_present_detectType = true && that.isSetDetectType();
    if (this_present_detectType || that_present_detectType) {
      if (!(this_present_detectType && that_present_detectType))
        return false;
      if (!this.detectType.equals(that.detectType))
        return false;
    }

    return true;
  }

  @Override
  public int hashCode() {
    int hashCode = 1;

    hashCode = hashCode * 8191 + ((isSetServiceId()) ? 131071 : 524287);
    if (isSetServiceId())
      hashCode = hashCode * 8191 + serviceId.hashCode();

    hashCode = hashCode * 8191 + ((isSetStreamURL()) ? 131071 : 524287);
    if (isSetStreamURL())
      hashCode = hashCode * 8191 + streamURL.hashCode();

    hashCode = hashCode * 8191 + streamType;

    hashCode = hashCode * 8191 + decodeMode;

    hashCode = hashCode * 8191 + frameWidth;

    hashCode = hashCode * 8191 + frameHeight;

    hashCode = hashCode * 8191 + ((isSetDetectType()) ? 131071 : 524287);
    if (isSetDetectType())
      hashCode = hashCode * 8191 + detectType.hashCode();

    return hashCode;
  }

  @Override
  public int compareTo(DetectServiceConfiguration other) {
    if (!getClass().equals(other.getClass())) {
      return getClass().getName().compareTo(other.getClass().getName());
    }

    int lastComparison = 0;

    lastComparison = Boolean.valueOf(isSetServiceId()).compareTo(other.isSetServiceId());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetServiceId()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.serviceId, other.serviceId);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetStreamURL()).compareTo(other.isSetStreamURL());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetStreamURL()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.streamURL, other.streamURL);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetStreamType()).compareTo(other.isSetStreamType());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetStreamType()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.streamType, other.streamType);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetDecodeMode()).compareTo(other.isSetDecodeMode());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetDecodeMode()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.decodeMode, other.decodeMode);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetFrameWidth()).compareTo(other.isSetFrameWidth());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetFrameWidth()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.frameWidth, other.frameWidth);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetFrameHeight()).compareTo(other.isSetFrameHeight());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetFrameHeight()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.frameHeight, other.frameHeight);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetDetectType()).compareTo(other.isSetDetectType());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetDetectType()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.detectType, other.detectType);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    return 0;
  }

  public _Fields fieldForId(int fieldId) {
    return _Fields.findByThriftId(fieldId);
  }

  public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
    scheme(iprot).read(iprot, this);
  }

  public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
    scheme(oprot).write(oprot, this);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder("DetectServiceConfiguration(");
    boolean first = true;

    sb.append("serviceId:");
    if (this.serviceId == null) {
      sb.append("null");
    } else {
      sb.append(this.serviceId);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("streamURL:");
    if (this.streamURL == null) {
      sb.append("null");
    } else {
      sb.append(this.streamURL);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("streamType:");
    sb.append(this.streamType);
    first = false;
    if (!first) sb.append(", ");
    sb.append("decodeMode:");
    sb.append(this.decodeMode);
    first = false;
    if (!first) sb.append(", ");
    sb.append("frameWidth:");
    sb.append(this.frameWidth);
    first = false;
    if (!first) sb.append(", ");
    sb.append("frameHeight:");
    sb.append(this.frameHeight);
    first = false;
    if (!first) sb.append(", ");
    sb.append("detectType:");
    if (this.detectType == null) {
      sb.append("null");
    } else {
      sb.append(this.detectType);
    }
    first = false;
    sb.append(")");
    return sb.toString();
  }

  public void validate() throws org.apache.thrift.TException {
    // check for required fields
    if (serviceId == null) {
      throw new org.apache.thrift.protocol.TProtocolException("Required field 'serviceId' was not present! Struct: " + toString());
    }
    if (streamURL == null) {
      throw new org.apache.thrift.protocol.TProtocolException("Required field 'streamURL' was not present! Struct: " + toString());
    }
    // alas, we cannot check 'streamType' because it's a primitive and you chose the non-beans generator.
    // alas, we cannot check 'decodeMode' because it's a primitive and you chose the non-beans generator.
    // alas, we cannot check 'frameWidth' because it's a primitive and you chose the non-beans generator.
    // alas, we cannot check 'frameHeight' because it's a primitive and you chose the non-beans generator.
    if (detectType == null) {
      throw new org.apache.thrift.protocol.TProtocolException("Required field 'detectType' was not present! Struct: " + toString());
    }
    // check for sub-struct validity
  }

  private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
    try {
      write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
    try {
      // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
      __isset_bitfield = 0;
      read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private static class DetectServiceConfigurationStandardSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
    public DetectServiceConfigurationStandardScheme getScheme() {
      return new DetectServiceConfigurationStandardScheme();
    }
  }

  private static class DetectServiceConfigurationStandardScheme extends org.apache.thrift.scheme.StandardScheme<DetectServiceConfiguration> {

    public void read(org.apache.thrift.protocol.TProtocol iprot, DetectServiceConfiguration struct) throws org.apache.thrift.TException {
      org.apache.thrift.protocol.TField schemeField;
      iprot.readStructBegin();
      while (true)
      {
        schemeField = iprot.readFieldBegin();
        if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
          break;
        }
        switch (schemeField.id) {
          case 1: // SERVICE_ID
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.serviceId = iprot.readString();
              struct.setServiceIdIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 2: // STREAM_URL
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.streamURL = iprot.readString();
              struct.setStreamURLIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 3: // STREAM_TYPE
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.streamType = iprot.readI32();
              struct.setStreamTypeIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 4: // DECODE_MODE
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.decodeMode = iprot.readI32();
              struct.setDecodeModeIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 5: // FRAME_WIDTH
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.frameWidth = iprot.readI32();
              struct.setFrameWidthIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 6: // FRAME_HEIGHT
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.frameHeight = iprot.readI32();
              struct.setFrameHeightIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 7: // DETECT_TYPE
            if (schemeField.type == org.apache.thrift.protocol.TType.LIST) {
              {
                org.apache.thrift.protocol.TList _list24 = iprot.readListBegin();
                struct.detectType = new java.util.ArrayList<DetectType>(_list24.size);
                DetectType _elem25;
                for (int _i26 = 0; _i26 < _list24.size; ++_i26)
                {
                  _elem25 = new DetectType();
                  _elem25.read(iprot);
                  struct.detectType.add(_elem25);
                }
                iprot.readListEnd();
              }
              struct.setDetectTypeIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          default:
            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
        }
        iprot.readFieldEnd();
      }
      iprot.readStructEnd();

      // check for required fields of primitive type, which can't be checked in the validate method
      if (!struct.isSetStreamType()) {
        throw new org.apache.thrift.protocol.TProtocolException("Required field 'streamType' was not found in serialized data! Struct: " + toString());
      }
      if (!struct.isSetDecodeMode()) {
        throw new org.apache.thrift.protocol.TProtocolException("Required field 'decodeMode' was not found in serialized data! Struct: " + toString());
      }
      if (!struct.isSetFrameWidth()) {
        throw new org.apache.thrift.protocol.TProtocolException("Required field 'frameWidth' was not found in serialized data! Struct: " + toString());
      }
      if (!struct.isSetFrameHeight()) {
        throw new org.apache.thrift.protocol.TProtocolException("Required field 'frameHeight' was not found in serialized data! Struct: " + toString());
      }
      struct.validate();
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot, DetectServiceConfiguration struct) throws org.apache.thrift.TException {
      struct.validate();

      oprot.writeStructBegin(STRUCT_DESC);
      if (struct.serviceId != null) {
        oprot.writeFieldBegin(SERVICE_ID_FIELD_DESC);
        oprot.writeString(struct.serviceId);
        oprot.writeFieldEnd();
      }
      if (struct.streamURL != null) {
        oprot.writeFieldBegin(STREAM_URL_FIELD_DESC);
        oprot.writeString(struct.streamURL);
        oprot.writeFieldEnd();
      }
      oprot.writeFieldBegin(STREAM_TYPE_FIELD_DESC);
      oprot.writeI32(struct.streamType);
      oprot.writeFieldEnd();
      oprot.writeFieldBegin(DECODE_MODE_FIELD_DESC);
      oprot.writeI32(struct.decodeMode);
      oprot.writeFieldEnd();
      oprot.writeFieldBegin(FRAME_WIDTH_FIELD_DESC);
      oprot.writeI32(struct.frameWidth);
      oprot.writeFieldEnd();
      oprot.writeFieldBegin(FRAME_HEIGHT_FIELD_DESC);
      oprot.writeI32(struct.frameHeight);
      oprot.writeFieldEnd();
      if (struct.detectType != null) {
        oprot.writeFieldBegin(DETECT_TYPE_FIELD_DESC);
        {
          oprot.writeListBegin(new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRUCT, struct.detectType.size()));
          for (DetectType _iter27 : struct.detectType)
          {
            _iter27.write(oprot);
          }
          oprot.writeListEnd();
        }
        oprot.writeFieldEnd();
      }
      oprot.writeFieldStop();
      oprot.writeStructEnd();
    }

  }

  private static class DetectServiceConfigurationTupleSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
    public DetectServiceConfigurationTupleScheme getScheme() {
      return new DetectServiceConfigurationTupleScheme();
    }
  }

  private static class DetectServiceConfigurationTupleScheme extends org.apache.thrift.scheme.TupleScheme<DetectServiceConfiguration> {

    @Override
    public void write(org.apache.thrift.protocol.TProtocol prot, DetectServiceConfiguration struct) throws org.apache.thrift.TException {
      org.apache.thrift.protocol.TTupleProtocol oprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
      oprot.writeString(struct.serviceId);
      oprot.writeString(struct.streamURL);
      oprot.writeI32(struct.streamType);
      oprot.writeI32(struct.decodeMode);
      oprot.writeI32(struct.frameWidth);
      oprot.writeI32(struct.frameHeight);
      {
        oprot.writeI32(struct.detectType.size());
        for (DetectType _iter28 : struct.detectType)
        {
          _iter28.write(oprot);
        }
      }
    }

    @Override
    public void read(org.apache.thrift.protocol.TProtocol prot, DetectServiceConfiguration struct) throws org.apache.thrift.TException {
      org.apache.thrift.protocol.TTupleProtocol iprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
      struct.serviceId = iprot.readString();
      struct.setServiceIdIsSet(true);
      struct.streamURL = iprot.readString();
      struct.setStreamURLIsSet(true);
      struct.streamType = iprot.readI32();
      struct.setStreamTypeIsSet(true);
      struct.decodeMode = iprot.readI32();
      struct.setDecodeModeIsSet(true);
      struct.frameWidth = iprot.readI32();
      struct.setFrameWidthIsSet(true);
      struct.frameHeight = iprot.readI32();
      struct.setFrameHeightIsSet(true);
      {
        org.apache.thrift.protocol.TList _list29 = new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRUCT, iprot.readI32());
        struct.detectType = new java.util.ArrayList<DetectType>(_list29.size);
        DetectType _elem30;
        for (int _i31 = 0; _i31 < _list29.size; ++_i31)
        {
          _elem30 = new DetectType();
          _elem30.read(iprot);
          struct.detectType.add(_elem30);
        }
      }
      struct.setDetectTypeIsSet(true);
    }
  }

  private static <S extends org.apache.thrift.scheme.IScheme> S scheme(org.apache.thrift.protocol.TProtocol proto) {
    return (org.apache.thrift.scheme.StandardScheme.class.equals(proto.getScheme()) ? STANDARD_SCHEME_FACTORY : TUPLE_SCHEME_FACTORY).getScheme();
  }
}

